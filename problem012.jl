# problem012 TO SOLVE

# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28

# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

##

function countdivisors(n::Int)::Int
    count = 0
    maxiter = Int(floor(sqrt(n)))
    for i in 1:(maxiter - 1)
        if n%i == 0
            count += 2
        end
    end
    if n%maxiter == 0
        count +=2
        if maxiter == sqrt(n)
            count -=1
        end
    end
    return count
end

##

function findtriang(k::Int)::Int
    n = 2
    while true
        if n%2 == 0
            first = n รท 2
            second = n+1
        else
            first = (n+1) รท 2
            second = n
        end
        
        if countdivisors(first)*countdivisors(second) > k
            return first*second
        end
        n +=1
    end
end

##

k = 500
print(findtriang(k))